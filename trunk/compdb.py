import sys
import re

# Author: Goffer Looney, 2009
# Reports all the differences between 2 DB schemas.
# Both schemas must only contain mysql DDL statements either generated by 'mysql_dump' or 'manage.py sql'.

class CompDB:
    ''' open 2 files 
        convert them into a canonical dictionary
        compare the dictionaries
        reports which table, fields, PK, unique or FK has changed
    '''
    
    source_file_name = ''
    target_file_name = ''
    
    def set_files(self, source_file_name, target_file_name):
        self.source_file_name = source_file_name
        self.target_file_name = target_file_name
    
    def compare(self, table_prefix=''):
        tables_source = self.analyse_file(False, table_prefix)
        tables_target = self.analyse_file(True, table_prefix)
        # 1. compare tables
        diff_count = 0
        for table_name in tables_source:
            if table_name in tables_target:
                diff_count += self.compare_tables(tables_source[table_name], tables_target[table_name])
            else:
                diff_count += 1
                print '- TABLE: %s' % table_name

        for table_name in tables_target:
            if table_name not in tables_source:
                diff_count += 1
                print '+ TABLE: %s' % table_name
        
        print '%d difference(s).' % diff_count

    def compare_tables(self, source, target):
        diff_count = 0
        # 2.1. compare fields
        for field_name in source['fields']:
            if field_name in target['fields']:
                if source['fields'][field_name] != target['fields'][field_name]:
                    diff_count += 1
                    print "%% FIELD: %s.%s \n\t%s \n\t=> \n\t%s" % (source['name'], field_name, self.describe_field(source['fields'][field_name]), self.describe_field(target['fields'][field_name]))
            else:
                diff_count += 1
                print '- FIELD: %s.%s' % (source['name'], self.describe_field(source['fields'][field_name]))

        for field_name in target['fields']:
            if field_name not in source['fields']:
                diff_count += 1
                print '+ FIELD: %s.%s' % (source['name'], self.describe_field(target['fields'][field_name]))
        
        # 2.2. compare fk
        for key_name in source['fk']:
            if key_name not in target['fk']:
                diff_count += 1
                print '- FOREIGN KEY: %s.%s = %s' % (source['name'], key_name, self.describe_foreign_key(source['fk'][key_name]))
            else:
                if source['fk'][key_name] != target['fk'][key_name]:
                    diff_count += 1
                    print '%% FOREIGN KEY: %s.%s\n\t%s \n\t=> \n\t%s' % (source['name'], key_name, self.describe_foreign_key(source['fk'][key_name]), self.describe_foreign_key(target['fk'][key_name]))
        
        for key_name in target['fk']:
            if key_name not in source['fk']:
                diff_count += 1
                print '+ FOREIGN KEY: %s.%s = %s' % (source['name'], key_name, self.describe_foreign_key(target['fk'][key_name]))
                
        # 2.3. compare uk
        for key_name in source['uk']:
            if key_name not in target['uk']:
                diff_count += 1
                print '- UNIQUE KEY: %s.(%s)' % (source['name'], ', '.join(source['uk'][key_name]))
        
        for key_name in target['uk']:
            if key_name not in source['uk']:
                diff_count += 1
                print '+ UNIQUE KEY: %s.(%s)' % (source['name'], ', '.join(target['uk'][key_name]))
                
        # 2.4. compare pk
        if source['pk'] != target['pk']:
            diff_count += 1
            print '%% PRIMARY KEY: %s \n\t%s \n\t=> \n\t%s' % (source['name'], ', '.join(source['pk']), ', '.join(target['pk']))
        
        return diff_count
        
    def describe_field(self, field):
        ret = '`%s` %s' % (field['name'], field['type'])
        if field['inc']: ret += ' AUTO_INCREMENT'
        if field['nn']: ret += ' NOT NULL'
        if field['default']:
            ret += ' DEFAULT '
            if field['default'] == 'NULL':
                ret += 'NULL'
            else:
                ret += '`%s`' % field['default']
        return ret

    def describe_foreign_key(self, key):
        return '(%s) -> %s.(%s)' % (', '.join(key['k']), key['table'], ', '.join(key['fk']))
            
    def analyse_file(self, target=False, table_prefix='plays_'):
        file_name = self.source_file_name
        if (target): file_name = self.target_file_name
        # read the file
        f = None
        try:
            f = open(file_name, 'r')
        except IOError:
            print 'Error reading %s' % file_name
            exit()
            
        tables = {}
        current_table = None
        
        line_number = 0
        for line in f:
            line_number += 1
            detected = False
            if re.match('--', line):
                continue
            if re.match('/\*.*\*/', line):
                continue
            if (current_table is None):
                # statements to ignore
                if re.match('(?i)\s*DROP TABLE', line):
                    detected = True
                # statements to ignore
                if re.match('(?i)\s*SET @|\w', line):
                    detected = True
                match = re.match('(?i)CREATE TABLE `([^`]*)`', line)
                if (match):
                    detected = True
                    current_table = {'name' : match.group(1), 'fields': {}, 'pk': [], 'fk': {}, 'uk': {}}
                # ALTER TABLE `plays_text_sample` ADD CONSTRAINT text_id_refs_id_4aaf935 FOREIGN KEY (`text_id`) REFERENCES `plays_text` (`id`);
                foreign_key = re.match('(?i)\s*ALTER TABLE\s+`([^`]+)`\s+ADD CONSTRAINT\s+(.+)\s+FOREIGN KEY\s+\(([^)]+)\)\s+REFERENCES\s+`([^`]+)`\s+\(([^)]+)\)', line)
                if (foreign_key):
                    detected = True
                    # split the fields
                    key_fields = re.split(',', foreign_key.group(3))
                    source_fields = []
                    for field in key_fields:
                        source_fields.append(field.strip(' ').strip('`'))
                    key_fields = re.split(',', foreign_key.group(5))
                    target_fields = []
                    for field in key_fields:
                        target_fields.append(field.strip(' ').strip('`'))

                    tables[foreign_key.group(1)]['fk'][foreign_key.group(2)] = {'table': foreign_key.group(4), 'k': source_fields, 'fk': target_fields}
                    
            else:
                # statements to ignore
                if re.match('\s*KEY `', line):
                    detected = True
                # remove , at the end
                line = re.sub(',$', '', line)
                # FIELD
                match = re.match('\s*`(.*)`\s+([^\s]*)\s+(.*)$', line)
                if (match):
                    detected = True
                    field = {'name': match.group(1), 'type': match.group(2), 'nn': False, 'default': False, 'inc': False}
                    
                    # equivalent data types
                    if field['type'] == 'integer': field['type'] = 'int(11)'
                    if field['type'] == 'smallint(6)': field['type'] = 'smallint'
                    if field['type'] == 'tinyint(1)': field['type'] = 'bool'
                    test_null = True

                    if (re.search('(?i)PRIMARY KEY', match.group(3))):
                        current_table['pk'].append(match.group(1))
                    if (re.search('(?i)NOT NULL', match.group(3))):
                        field['nn'] = True
                        test_null = False
                    if (re.search('(?i)auto_increment', match.group(3))):
                        field['inc'] = True
                    default_value = re.search("(?i)DEFAULT\s+(?:(\w+)|'([^']*)')", match.group(3))
                    if (default_value):
                        field['default'] = default_value.group(1) or default_value.group(2)
                        if field['default'] == 'NULL': test_null = False
                    # NULL on its own means 'DEFAULT NULL'
                    if test_null and re.match('(?i)NULL', match.group(3)):
                        field['default'] = 'NULL'
                    # todo: other properties to capture???
                    current_table['fields'][field['name']] = field
                # PRIMARY KEY (`id`),
                primary_key = re.match('(?i)\s*PRIMARY KEY\s+\(([^)]+)\)', line)
                if (primary_key):
                    detected = True
                    # split the fields
                    pk_fields = re.split(',', primary_key.group(1))
                    for field in pk_fields:
                        current_table['pk'].append(field.strip(' ').strip('`'))
                # UNIQUE (`location`, `text_id`)
                unique_key = re.match('(?i)\s*UNIQUE\s+\(([^)]+)\)', line)
                if (unique_key):
                    detected = True
                    # split the fields
                    uk_fields = re.split(',', unique_key.group(1))
                    fields = []
                    for field in uk_fields:
                        fields.append(field.strip(' ').strip('`'))
                    #current_table['uk'][unique_key.group(1)] = fields
                    current_table['uk'][''.join(fields)] = fields
                
                # UNIQUE KEY `location` (`location`,`text_id`),
                unique_key = re.match('(?i)\s*UNIQUE KEY\s+`([^`]+)`\s+\(([^)]+)\)', line)
                if (unique_key):
                    detected = True
                    # split the fields
                    uk_fields = re.split(',', unique_key.group(2))
                    fields = []
                    for field in uk_fields:
                        fields.append(field.strip(' ').strip('`'))
                    #current_table['uk'][unique_key.group(1)] = fields
                    current_table['uk'][''.join(fields)] = fields                    
                
                # CONSTRAINT `text_id_refs_id_4aaf935` FOREIGN KEY (`text_id`) REFERENCES `plays_text` (`id`)
                # TODO: structure the fields
                foreign_key = re.match('(?i)\s*CONSTRAINT\s+`([^`]+)`\s+FOREIGN KEY\s+\(([^)]+)\)\s+REFERENCES\s+`([^`]+)`\s+\(([^)]+)\)', line)
                if (foreign_key):
                    detected = True
                    # split the fields
                    key_fields = re.split(',', foreign_key.group(2))
                    source_fields = []
                    for field in key_fields:
                        source_fields.append(field.strip(' ').strip('`'))
                    key_fields = re.split(',', foreign_key.group(4))
                    target_fields = []
                    for field in key_fields:
                        target_fields.append(field.strip(' ').strip('`'))

                    current_table['fk'][foreign_key.group(1)] = {'table': foreign_key.group(3), 'k': source_fields, 'fk': target_fields}
                
                # TODO: KEY `plays_text_sample_text_id` (`text_id`),
                
                # end of table
                match = re.match('\)', line)
                if (match):
                    detected = True
                    tables[current_table['name']] = current_table
                    current_table = None
            line = line.strip("\n ")
            if (not detected and len(line) > 1):
                print "WARNING: (%s:%d) not recognised: %s" % (file_name, line_number, line)
                
        f.close()
        # analyse the file
        
        # filter the result
        self.filter_table_dic(tables, table_prefix)
        
        return tables
    
    def filter_table_dic(self, tables={}, table_prefix=''):
        if tables is None or table_prefix == '': return
        for table_name in tables.keys():
            if (not re.match(table_prefix, table_name)): del tables[table_name]

if (len(sys.argv) < 4):
    print "Usage: %s OLD_SCHEMA.sql NEW_SCHEMA.sql TABLE_PREFIX\n" % sys.argv[0]
    print "Reports all the differences between 2 DB schemas.\n"
    print "Both schemas must only contain mysql DDL statements either generated by 'mysql_dump' or 'manage.py sql'.\n"
else:
    comp = CompDB()
    comp.set_files(sys.argv[1], sys.argv[2])
    comp.compare(sys.argv[3])
